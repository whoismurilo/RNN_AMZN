# -*- coding: utf-8 -*-
"""RNN_AMZN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RvYhmfuJt_UlzaGoXpxuaPWcwhwC6iwN
"""

# Commented out IPython magic to ensure Python compatibility.
#importing libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
plt.style.use('fivethirtyeight')
# %matplotlib inline

#importing stock price of Amazon
data = web.DataReader('AMZN', data_source='yahoo', start='2010-01-01', end='2020-08-27')
data.head()

data.shape

plt.figure(figsize=(16,8))
plt.title('Histórico de Fechamento AMZN')
plt.plot(data['Close'])
plt.xlabel('Data', fontsize=18)
plt.ylabel('Preço', fontsize=18)
plt.show()

dataset = data.filter(['Close'])

close = dataset.values

training_close_len = math.ceil(len(close) * .8)
training_close_len

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(close)

scaled_data

train_data = scaled_data[0:training_close_len, :]
 x_train = []
 y_train = []

 for i in range(60, len(train_data)):
   x_train.append(train_data[i-60:i, 0])
   y_train.append(train_data[i, 0])
   if i<=61:
     print(x_train)
     print(y_train)
     print()

x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape(x_train, (2086, 60, 1))
x_train.shape

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs=1)

test_data = scaled_data[training_close_len - 60: , :]
x_test = []
y_test = close[training_close_len:,:]
for j in range(60, len(test_data)):
  x_test.append(test_data[j-60:j, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predict = model.predict(x_test)
predict = scaler.inverse_transform(predict)

rmse = np.sqrt(np.mean(predict - y_test) ** 2)
rmse

train = dataset[:training_close_len]
valid = dataset[training_close_len:]
valid['Predict'] = predict

plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Data', fontsize=18)
plt.ylabel('Fechamento U$', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predict']])
plt.legend(['Train', 'Val', 'Predict'], loc='lower right')
plt.show()

valid

